// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneLinkTest.Infrastructure.DataAccess;

namespace OneLinkTest.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(OneLinkTestContext))]
    [Migration("20201021231228_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OneLinkTest.Domain.Areas.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            Name = "Area1"
                        });
                });

            modelBuilder.Entity("OneLinkTest.Domain.Areas.Subareas.Subarea", b =>
                {
                    b.Property<int>("SubareaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubareaId");

                    b.HasIndex("AreaId");

                    b.ToTable("Subareas");

                    b.HasData(
                        new
                        {
                            SubareaId = 1,
                            AreaId = 1,
                            Name = "Subarea1"
                        });
                });

            modelBuilder.Entity("OneLinkTest.Domain.Employees.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Document")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubareaId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("SubareaId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("OneLinkTest.Domain.Areas.Subareas.Subarea", b =>
                {
                    b.HasOne("OneLinkTest.Domain.Areas.Area", "Area")
                        .WithMany("Subareas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OneLinkTest.Domain.Employees.Employee", b =>
                {
                    b.HasOne("OneLinkTest.Domain.Areas.Subareas.Subarea", "Subarea")
                        .WithMany("Employees")
                        .HasForeignKey("SubareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
